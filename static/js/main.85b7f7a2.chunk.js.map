{"version":3,"sources":["components/Title/index.js","components/BeastCard/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","currentScore","topScore","BeastCard","onClick","handleClick","alt","name","src","image","Wrapper","App","state","beasts","pickedBeasts","event","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","setState","shuffleArray","a","j","x","i","length","Math","floor","random","cb","newState","includes","push","alertWinner","this","map","beast","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"40CAceA,MAXf,SAAeC,GACb,OACE,yBAAKC,UAAU,mBACb,wBAAIA,UAAU,SAASD,EAAME,UAC7B,wBAAID,UAAU,cAAd,2BACA,wBAAIA,UAAU,cAAd,UAAmCD,EAAMG,aAAzC,iBAAqEH,EAAMI,Y,MCIlEC,MATf,SAAmBL,GAEf,OACE,4BAAQC,UAAU,aAAaK,QAASN,EAAMO,aAC5C,yBAAKC,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,U,MCA1BC,MAJf,SAAiBZ,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,OCgF1BW,E,2MA5EbC,MAAQ,CACNC,OAAQA,EACRC,aAAc,GACdZ,SAAU,EACVD,aAAc,G,EAGhBI,YAAc,SAAAU,GACZ,IAAMR,EAAOQ,EAAMC,OAAOC,WAAWC,aAAa,OAAOC,MACzD,EAAKC,oBACL,EAAKC,WAAWd,EAAM,EAAKe,iB,EAG7BF,kBAAoB,WAClB,EAAKG,SAAS,EAAKX,MAAMC,OAAS,EAAKW,aAAa,EAAKZ,MAAMC,U,EAEjEW,aAAe,SAACC,GACd,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAEH,EAAEI,OAAS,EAAGD,EAAI,EAAGA,IAC1BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAEG,GACNH,EAAEG,GAAGH,EAAEC,GACPD,EAAEC,GAAGC,EAEP,OAAOF,G,EAGTJ,WAAa,SAACd,EAAM0B,GAClB,IAAMC,EAAQ,eAAQ,EAAKtB,OACvBsB,EAASpB,aAAaqB,SAAS5B,IACjC2B,EAASjC,aAAe,EACxBiC,EAASpB,aAAe,GACxB,EAAKS,SAAS,EAAKX,MAAQsB,KAE3BA,EAASpB,aAAasB,KAAK7B,GAC3B2B,EAASjC,eACT,EAAKsB,SAAS,EAAKX,MAAQsB,IAE7BD,EAAGC,EAAU,EAAKG,c,EAGpBf,eAAiB,SAACY,EAAUD,GACrBC,EAASpB,aAAae,OAASK,EAAShC,WAC3CgC,EAAShC,WACT,EAAKqB,SAAS,EAAKX,MAAQsB,IAE7BD,EAAGC,I,EAGLG,YAAc,SAACH,GACwB,KAAjCA,EAASpB,aAAae,SACxBK,EAASpB,aAAe,GACxB,EAAKS,SAAS,EAAKX,MAAQsB,K,wEAIrB,IAAD,OACP,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACAjC,aAAcqC,KAAK1B,MAAMX,aACzBC,SAAUoC,KAAK1B,MAAMV,UAFrB,eAGCoC,KAAK1B,MAAMC,OAAO0B,KAAI,SAAAC,GAAK,OAC1B,kBAAC,EAAD,CACEC,GAAID,EAAMC,GACVC,IAAKF,EAAMC,GACXlC,KAAMiC,EAAMjC,KACZE,MAAO+B,EAAM/B,MACbJ,YAAa,EAAKA,sB,GArEZsC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.85b7f7a2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n    <div className=\"title-container\">\r\n      <h1 className=\"title\">{props.children}</h1>\r\n      <h2 className=\"title-text\">Click an Image to Begin</h2>\r\n      <h2 className=\"title-text\">Score: {props.currentScore} | Top Score: {props.topScore}</h2>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Title;\r\n","import React  from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction BeastCard(props) {\r\n\r\n    return(\r\n      <button className=\"beast-card\" onClick={props.handleClick}>\r\n        <img alt={props.name} src={props.image} />\r\n      </button>\r\n    );\r\n  }\r\n\r\nexport default BeastCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\nimport Title from \"./components/Title\";\nimport BeastCard from \"./components/BeastCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport beasts from \"./bestiary.json\";\n\n\nclass App extends Component {\n  state = {\n    beasts: beasts,\n    pickedBeasts: [],\n    topScore: 0,\n    currentScore: 0\n  };\n\n  handleClick = event => {\n    const name = event.target.attributes.getNamedItem(\"alt\").value;\n    this.shuffleCharacters();\n    this.checkGuess(name, this.updateTopScore);  \n  }\n  \n  shuffleCharacters = () => {\n    this.setState(this.state.beasts = this.shuffleArray(this.state.beasts))\n  }\n  shuffleArray = (a) => {\n    var j, x, i;\n    for (i=a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i]=a[j];\n      a[j]=x;\n    }\n    return a;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedBeasts.includes(name)) {\n      newState.currentScore = 0;\n      newState.pickedBeasts = [];\n      this.setState(this.state = newState);\n    } else {\n      newState.pickedBeasts.push(name);\n      newState.currentScore++;\n      this.setState(this.state = newState)\n    }\n    cb(newState, this.alertWinner);\n  }\n\n  updateTopScore = (newState, cb) => {\n    if  (newState.pickedBeasts.length > newState.topScore) {\n      newState.topScore++;\n      this.setState(this.state = newState);\n    }\n    cb(newState);\n  }\n\n  alertWinner = (newState) => {\n    if (newState.pickedBeasts.length === 12) {\n      newState.pickedBeasts = [];\n      this.setState(this.state = newState)\n    }\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Title \n        currentScore={this.state.currentScore}\n        topScore={this.state.topScore}>Memory Game</Title>\n        {this.state.beasts.map(beast => (\n          <BeastCard\n            id={beast.id}\n            key={beast.id}\n            name={beast.name}\n            image={beast.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}